##### stoke search config file

--out result.s # Path to write results to

--target bins/_Z16update_interval1mmmm.s # Path to the function to optimize
 --init target
# --init empty # Begin search from all nops 
# --init zero # Begin search from all nops 
# --current result.s
# --best_yet result.s
# --best_correct bins/_Z16update_interval1mmmm.s

--def_in "{ %rsp  %rcx %rdx %rsi %rdi }" # The registers that are defined on entry to the target
--live_out "{ %rax %rdx }" # The registers that are live on exit from the target
# --heap_out # The heap is live on exit
# --stack_out

--testcases testcase.tc # Path to testcase file
--shuffle_testcases
--training_set "{ 0 ... 10 }" # Testcases to use for measuring correctness during search
--test_set "{ 10 ... 1023 }"  # Testcases to use as holdout set for checking correctness

--distance hamming # Metric for measuring error between live-outs
# --relax_reg # Allow partial credit for results that appear in wrong locations
--misalign_penalty 1 # Penalty for results that appear in the wrong location
--reduction sum # Method for summing errors across testcases
--sig_penalty 9999 # Score to assign to rewrites that produce non-zero signals
-k 1 # Multiplier for the correctness term

--perf latency # Measure performance by summing instruction latencies
# --perf size 

--cpu_flags "{ popcnt cmov mmx sse sse2 ssse3 pni sse4_1 sse4_2 abm bmi1 bmi2 }" # cpuid flags to use when proposing instructions
#--mem_read # Propose instructions that read memory
#--mem_write # Propose instructions that write memory

--global_swap_mass 1 # Proposal mass
--instruction_mass 1 # Proposal mass
--local_swap_mass 1 # Proposal mass
--opcode_mass 1 # Proposal mass
--operand_mass 1 # Proposal mass
--resize_mass 1 # Proposal mass

--nop_percent 10 # Percent of instruction moves that produce nop
--beta 1 # Search annealing constant
--max_instrs 40 # The maximum number of instruction allowed in a rewrite

--statistics_interval 100000 # Print statistics every 100k proposals
#--timeout 10000000 # Propose 10m modifications before giving up
--timeout_sec 300  # Run for n seconds
--timeout_action testcase # Try adding a new testcase from the testset when search times out
--timeout_cycles 16 # Timeout up to 16 times before giving up

--strategy hold_out # Verify results using a larger hold out testcase set

# --debug_args
